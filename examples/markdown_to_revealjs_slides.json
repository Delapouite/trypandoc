{"text":"---\ntitle: A quick tour of pandoc\ntheme: solarized\n...\n\n# The command-line tool\n\n##\n\nBy default pandoc works as a pipe, reading from stdin and writing to\nstdout.  Try it:\n\n    pandoc\n\n\nHit Ctrl-D (Ctrl-Z on Windows) when you're finished typing text.\n\n##\n\nLet's convert to latex instead of HTML.\n\n    pandoc --to latex\n\n. . .\n\nOr to mediawiki:\n\n    pandoc --to mediawiki\n\n##\n\nLet's convert a latex file to markdown:\n\n    pandoc -f latex -t markdown example.tex\n\n##\n\nFor help and information on which options pandoc supports:\n\n    pandoc --help\n\nMore detail can be found in the pandoc\n[README](http://johnmacfarlane.net/pandoc/README.html).  Or:\n\n    man pandoc\n    man pandoc_markdown\n\n##\n\nThe `--standalone` or `-s` option creates a standalone document with\nheader, footer, and metadata:\n\n    pandoc --standalone -o r.html -t html5 README\n\n. . .\n\nLet's add a table of contents and use some custom CSS:\n\n    pandoc --standalone --toc -o r.html -t html5 \\\n      --css my.css README\n\n##\n\nStandalone documents are constructed from templates.  To see the\ndefault template for a format, use `-D`:\n\n    pandoc -D html5 > my.html5\n\nThe template language is documented\n[here](http://johnmacfarlane.net/pandoc/README.html#templates).\n\n##\n\nPandoc allows structured metadata. It's\nYAML but with strings interpreted as markdown.\n\n    ---\n    title: My demonstration\n    author:\n     - Kurt GÃ¶del\n     - Haskell Curry\n    version:\n     - number: 1.0\n       date: July 13, 1945\n       log:  Initial commit\n     - number: 1.1\n       date: August 14, 1946\n       log:  Added some math\n    ---\n\n##\n\nThe metadata has a nice version history.\nLet's edit `my.html5` to include this before the `</header>` tag:\n\n``` html\n<ul class=\"versions\">\n$for(version)$\n<li>Version $version.number$ ($version.date$): $version.log$</li>\n$endfor$\n</ul>\n```\n\n##\n\nLet's try our custom template:\n\n    pandoc -s -S --template my.html5 -t html5 sample1.txt \\\n      -o sample1.html --mathjax\n\n##\n\nWe can create a PDF. Pandoc shells out to pdflatex for this.\n\n    pandoc sample1.txt -o sample1.pdf\n\nIf you want to use xelatex instead, use `--pdf-engine=xelatex`.\n\n##\n\nWe can create a word document without opening Word:\n\n    pandoc sample1.txt -o sample1.docx\n\nNote that the TeX math in the markdown file gets converted to native Word equations.\n\n##\n\nOr we can make an epub:\n\n    pandoc sample1.txt -t epub3 -o sample1.epub\n\n##\n\nPandoc can process citations using bibtex bibliographies (or several\nother formats).\n\n    pandoc -s --citeproc sample2.txt -o sample2.docx\n\n##\n\nThe bibliography style can be changed using the\n`--csl` option.\n\n\n    pandoc -s --citeproc sample2.txt -o sample2.docx \\\n      --csl ieee.csl\n\n##\n\nCitations work in all formats supported by pandoc:\n\n    pandoc -s --citeproc sample2.txt -o sample2.org\n    emacs sample2.org\n\n##\n\nSource code highlighting is automatic for marked code blocks.\nIt works in HTML, PDF, and docx:\n\n    pandoc -s sample3.txt -o sample3.html\n    pandoc -s sample3.txt -o sample3.pdf\n    pandoc -s sample3.txt -o sample3.docx\n\n. . .\n\nYou can change the highlighting style:\n\n    pandoc -s sample3.txt -o sample3.html --highlight-style=monochrome\n\n# A tour of pandoc's API\n\n## The Pandoc types\n\nYou can use `pandoc -t native` and `pandoc -f native` to explore:\n\n```\n% echo \"[*link*](/foo)\" | pandoc -t native\n[Para [Link (\"\",[],[]) [Emph [Str \"link\"]] (\"/foo\",\"\")]]\n```\n\n\n## Builder\n\n\nConcatenating lists is slow.  So we use special types `Inlines` and\n`Blocks` that wrap `Sequence`s of `Inline` and `Block` elements.\n\n## Transforming a Pandoc document\n\n```haskell\nmodule AllCaps (allCaps) where\nimport Text.Pandoc.Definition\nimport Data.Char (toUpper)\n\nallCaps :: Inline -> Inline\nallCaps (Str xs) = Str $ map toUpper xs\nallCaps x = x\n```\n. . .\n\n```\n% ghci AllCaps.hs\n*AllCaps > Text.Pandoc.Walk.walk allCaps $ Para [Emph [Str \"hi\"]]\nPara [Emph [Str \"HI\"]]\n```\n\n## Filters\n\nSuppose we have a program that defines a transformation\n\n```haskell\nf :: Pandoc -> Pandoc\n```\n\nSince `Pandoc` has `Read` and `Show` instances, we can\nwrite a pipe:\n\n```haskell\n-- f.hs\nmain = interact (show . f . read)\n```\n\nAnd use it thus:\n\n    pandoc -t native -s | runghc f.hs | pandoc -f native -s -t latex\n\n## JSON filters\n\n`Read` and `Show` are really slow.  Better to use JSON serialization:\n\n    pandoc -t json -s | runghc fjson.hs | pandoc -f json -s -t latex\n\n. . .\n\nTo simplify this pattern, we added `--filter`:\n\n    pandoc -s -t latex --filter fjson.hs\n\n## toJSONFilter\n\n\n`toJSONFilter` takes any function `a -> a` or `a -> [a]` or\n`a -> IO a`, where `a` is a Pandoc type, and turns it into a\nJSON filter.\n\n```haskell\nimport Text.Pandoc.JSON\nimport AllCaps (allCaps)\n\nmain = toJSONFilter allCaps\n```\n\n## Example: `emphToCaps.hs`\n\n```haskell\n-- pandoc --filter ./emphToCaps.hs\nimport Text.Pandoc.JSON\nimport Text.Pandoc.Walk\nimport AllCaps (allCaps)\n\nemphToCaps :: Inline -> [Inline]\nemphToCaps (Emph xs) = walk allCaps xs\nemphToCaps x = [x]\n\nmain :: IO ()\nmain = toJSONFilter emphToCaps\n```\n\n## Output format conditionalization\n\n`pandoc --filter` passes the name of the output format as\nfirst argument to the filter.  So the filter's behavior\ncan depend on the output format.\n\n`toJSONFilter` makes this easy:  just use a function whose\nfirst argument is `Maybe Format`.\n\n## Example:  `emphToCaps2.hs`\n\nEmph as <span style=\"font-variant:small-caps;\">Small Caps</span>\nin LaTeX and HTML, ALL CAPS otherwise:\n\n```haskell\n-- pandoc --filter ./emphToCaps2.hs\nimport Text.Pandoc.JSON\nimport Text.Pandoc.Walk\nimport AllCaps (allCaps)\n\nemphToCaps :: Maybe Format -> Inline -> [Inline]\nemphToCaps (Just f) (Emph xs)\n  | f == Format \"html\" || f == Format \"latex\" = [SmallCaps xs]\nemphToCaps _ (Emph xs) = walk allCaps xs\nemphToCaps _ x = [x]\n\nmain :: IO ()\nmain = toJSONFilter emphToCaps\n```\n\n## Exercises\n\n<http://johnmacfarlane.net/BayHac2014/exercises.pdf>\n\n","to":"revealjs","from":"markdown","standalone":true,"citeproc":false,"html-math-method":"mathjax","highlight-style":"pygments","files":{},"template":null}
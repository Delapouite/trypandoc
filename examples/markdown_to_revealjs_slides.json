{"text":"---\ntitle: Pandoc for TeXnicians\nauthor: John MacFarlane\ndate: TUG 2020, 2020-07-26\ntheme: solarized\nheader-includes: |\n    <style>\n      .reveal {\n      font-size: 20pt;\n      line-height: 1.2em;\n    }\n     .reveal pre code {\n      font-size: 16pt;\n      line-height: 1.2em;\n    }\n    </style>\n...\n\n# Overview\n\n##\n\n- What is pandoc?\n- Using pandoc to convert to and from LaTeX\n- Why write in Markdown?\n- Overcoming Markdown's limitations\n\n# What is pandoc?\n\n##\n\n<https://pandoc.org>\n\n## Let's take it for a spin\n\n```\n% cat simple.tex\n\\section{On $e=mc^2$}\\label{einstein}\n```\n\n```\n% pandoc -f latex -t native simple.tex\n% pandoc -f latex -t html simple.tex\n% pandoc -t html --mathml simple.tex\n% pandoc -t html --mathjax simple.tex\n% pandoc -t -html --mathjax -s simple.tex\n% pandoc -t ms simple.tex\n% pandoc -t gfm simple.tex\n% pandoc -t context simple.tex\n% pandoc -t jats simple.tex\n```\n\n\n## Some math\n\nLet's try with a sample TeX document by Professor A.J. Roberts\nat the University of Adelaide (CC licensed).\n\n<http://www.maths.adelaide.edu.au/anthony.roberts/LaTeX/Src/maths.tex>\n\n## Some math\n\n```\n% pandoc maths.tex -o maths.docx\n```\n\n. . .\n\nTwo problems:\n\n- the use of a low-level TeX primitive `\\mathcode`.\n- the use of `\\parbox` (line 288)\n\nFix by removing the `\\mathcode` stuff and\nredefining the `\\parmath` macro as a no-op:\n\n```latex\n\\newcommand{\\parmath}[2][]{#2}\n```\n\n## Take two\n\n```\n% pandoc maths.tex --number-sections -o maths.docx\n% open maths.docx\n```\n\n- AMS theorem environments come out right, including references.\n- Math is translated into native Word equation objects, which\n  can be edited and which match the font, rather than images.\n- Still missing: equation numbers.\n\n## Going the other way\n\n```\n% pandoc maths.docx -o newmaths.tex -s\n% xelatex newmaths\n% xelatex newmaths\n```\n\n## Converting to HTML\n\n```\n% pandoc maths.tex -s -o maths.html --mathml \\\n  --number-sections --toc\n% open maths.html\n```\n\n## Comparison with latex2rtf\n\n```\n% latex2rtf maths.tex\n% open -a \"Microsoft Word\" maths.rtf\n```\n\n- References not resolved in Section 1\n- Accents in Section 2 not above the letters, math generally\n  ugly\n- Arrays in Section 8 totally broken; same with subequations in\n  Section 9\n- But at least we do get equation numbers in Section 9\n\n## Comparison with tex4ht\n\n```\n% make4ht maths\n% open maths.html\n```\n\n- Theorem environments not handled in Section 1 (except for one?).\n- Missing accents in Section 2.\n- Ugly equations that incorporate both text and images in\n  different fonts.\n\n## Comparison with Word from PDF\n\n```\n% pdflatex maths\n% pdflatex maths\n% open -a \"Microsoft Word\" maths.pdf\n```\n\n- Section 2, accents messed up.\n- Some formulas are rendered with images, others with\n  regular characters, in non-matching font.\n- The 'where' in Section 6 is badly mispleacd.\n- The integral is missing in Section 7\n- The diagonal ellipses are missing in the arrays\n\n\n## Pandoc can interpret TeX macros\n\n```\n% cat macros.tex\n\\newcommand{\\nec}{\\Box}\n\\newcommand{\\if}[2]{#1 \\rightarrow #2}\n\\newenvironment{warning}%\n {\\begin{quote}\\textbf{WARNING!}}%\n {\\end{quote}}\n\n$\\if{\\nec \\phi}{\\phi}$\n\\begin{warning}\nDon't try this at home.\n\\end{warning}\n```\n\n```\n% pandoc macros.tex -t html\n```\n\n## Pandoc can resolve bibtex citations\n\nWith the help of the `pandoc-citeproc` filter\n(included in the released binaries).\n\n```\n% pandoc --filter pandoc-citeproc bib.tex \\\n  -t plain --csl ieee.csl\n```\n\n## Limitations\n\nPandoc is far from being able\nto convert arbitrary tex files with high accuracy.\n\nLet's try with a real-world example I got at random from arxiv.\n\n```\n% cd arxiv.2007.07694v1\n% pandoc arxiv.tex -o arxiv.docx\n```\n\n# An alternative\n\n## An alternative\n\nSo you can't just write in LaTeX and expect to convert at the\nlast minute to docx (for a publisher) or epub (for your\nstudents) or HTML (for your website).\n\nAn alternative: write your document\nin pandoc's extended version of Markdown, which pandoc\ncan convert with complete accuracy to any of its\noutput formats.\n\n\n## What is Markdown?\n\nMarkdown is a set of conventions for indicating document\nformatting in plain text, mostly inherited from the pre-internet\ndays of bulletin boards and email.\n\nIt was designed in 2004 by John Gruber with help from Aaron\nSchwartz, and it is currently much used by programmers,\nand on forums like stackoverflow and reddit, and by\ndata scientists via Jupyter notebooks and RMarkdown.\n\n<https://daringfireball.net/projects/markdown/>\n\n## Appealing things about Markdown\n\nThe source text is readable as it is.\nWhen writing and revising, you don't have\nto parse through command-words which aren't part\nof the content.\n\n. . .\n\nIf you're writing in a language other than English, you\ndon't have to have English words sprinkled in the text.\n\n. . .\n\nThere's no boilerplate at the beginning. The document\njust starts with the text.\n\n## Real separation of content from formatting.\n\n\\vspace{1em}\n\n> The paucity of means is the greatest virtue of markdown and\n> pandoc markdown.\n>\n> It is strangely difficult to get people to see the point, but the\n> defects of LaTeX for concentration, writing and thought, are at least\n> as great as those of Word, for the simple reason that it gives the\n> writer too much power; there is always another package to call in the\n> preamble, as there is always another drop down menu in Word.\n> ...\n>\n> In markdown - not to put too fine a point on it - the writer is only\n> ever faced with one question, and it is the right one: what the next\n> sentence should be.\n>\n> --- Michael Thompson, pandoc-discuss mailing list\n\n\n## Appealing things about Markdown\n\nUsing Markdown makes it possible to collaborate with\nothers who don't know LaTeX.\n\n## Appealing things about Markdown\n\nMarkdown can be converted with complete, reliable accuracy\ninto many different formats.\n\nIt's often not enough just to produce a PDF.\n\n- JATS for publication or archiving\n- EPUB for convenient reading on mobile devices\n- Docx or ICML for a publisher\n- HTML for a website (or accessibility)\n- Jupyter notebook for research\n- Beamer or reveal.js slides for presentation\n\nTeX is a great assembly language for publication-quality\ndocuments.\n\n## Limitations of Markdown\n\nJohn Gruber's original markdown syntax lacks support for:\n\n- [ ] tables\n- [ ] figures\n- [ ] footnotes\n- [ ] definition lists\n- [ ] ordered lists other than decimal-numbered\n- [ ] super/subscript\n- [ ] math\n- [ ] document metadata\n- [ ] attributes or metadata on individual elements like sections\n- [ ] labels and cross-references\n- [ ] numbering for running examples or equations\n\n## Limitations of Markdown\n\nWe couldn't live without these things in academic writing.\n\nAnd we definitely couldn't live without\n\n- [ ] bibtex/biblatex\n- [ ] macros\n\nHow can we overcome these limitations?\n\n# Overcoming Markdown's limitations\n\n## Pandoc's extended Markdown syntax\n\n- [x] tables (limited)\n- [x] figures (limited)\n- [x] math\n- [x] footnotes\n- [x] definition lists\n- [x] more flexible ordered lists\n- [x] running example lists\n- [x] super/subscript\n- [x] strikeout\n- [x] metadata\n- [x] attributes\n- [x] generic containers\n\n##\n\nPandoc also understands LaTeX macro definitions, which\nyou can use for math (no matter what the output format).\n\n##\n\nLabels and cross-references are still a work in progress,\nbut you can get good support for them using an external\nfilter, `pandoc-crossref`, by pandoc contributor\nNikolay Yakimov.\n\n##\n\nYou can use the `--citeproc` filter to resolve citations\nin this syntax:\n\n```\nBlah blah [@putnam:empirical, p. 33; see also\n@dummett:empirical].\n```\n\nChange the style by specifying a CSL stylesheet.\n(You can even change between author-date, numerical,\nand footnote sytles with no modifications to the source.)\n\nYou can use your existing bibtex or biblatex bibliography\nfile, or a CSL JSON bibliography such as can be produced\nby Zotero.\n\n##\n\nLaTeX macros allow you to define new constructions\nthat exactly fit what you're writing about.  Can\nwe recover this flexibility?\n\n## Raw TeX in Markdown\n\nOne approach is to just include bits of raw TeX in\nyour markdown file. Pandoc allows that.\n\n- There is a special syntax for indicating chunks of raw TeX,\n  but pandoc will also recognize obvious bits of raw TeX\n  and pass them through as such.\n\n- The raw TeX chunks will be passed on unchanged if the output format\n  is `latex`, `beamer`, or `context`, and otherwise simply omitted.\n\n##\n\n```\n% cat raw.md\n% pandoc raw.md -o raw.pdf\n% open raw.pdf\n```\nBut:\n```\n% pandoc raw.md -s -o raw.html\n% open raw.html\n```\n\n\n##\n\nDrawbacks:\n\n- With this approach you lose the ability to\n  target multiple formats.\n- Your source is now an ugly mix of Markdown and\n  TeX, compromising readability.\n\n\n## A better approach\n\n1.  Adopt the convention that\n    a certain thing representable in pandoc's markdown\n    should be interpreted as, say, a dropped capital letter.\n\n2.  Write a filter that does the interpretation.\n\n## Example: drop caps\n\nIn LaTeX we can use the `lettrine` package to\nget dropped capitals at the beginning of chapters:\n\n```latex\n\\lettrine{T}{his} is a pulley\n```\n\nWe will use a generic bracketed span with a class\nto represent this in Markdown:\n\n```\n[This]{.dropcap} is a pulley.\n\n```\n\n## Example: drop caps\n\nNow we need a filter that replaces\n`Span` elements with class `dropcap` in the Pandoc AST\nwith something appropriate for the output format.\n\n![](pandoc-architecture.pdf){height=3in}\n\n## Two kinds of filters\n\n- **JSON filters** operate on a serialized JSON\nrepresentation of the pandoc AST.  They\ncan be written in any language that can consume\nand produce JSON.\n\n- **Lua filters** use a Lua interpreter\nand environment built into pandoc.\nNo external software need be installed, and\nthe filters are more efficient,\nbecause we don't need to serialize and deserialize\nas JSON.\n\nDocumentation: https://pandoc.org/lua-filters.html\n\n## Example: drop caps\n\nIn a Lua filter we define functions that match\ndifferent kinds of AST elements. Here we want to\nmatch a Span.  Create a file `dropcap.lua`:\n\n```lua\nfunction Span(el)\n  -- do something with the Span (el)\n  -- return the transformed element or a new element\nend\n```\n\n## Example: drop caps\n\nWe only want to do something if the Span has the\nclass `dropcap` and its contents begin with a Str\nelement.\n\n```lua\nfunction Span(el)\n  if el.classes:includes('dropcap') then\n    return make_dropcap(el.content)\n  end\nend\n```\n\n## Example: drop caps\n\nNow we just have to define `make_dropcap`.  It takes\na list of Inline elements (`el.content`) and returns\na list of Inline elements.\n\n\\small\n\n```lua\nlocal function make_dropcap(els)\n  if els[1] and els[1].t == 'Str' then  -- arrays start at 1!\n    local first_letter, rest = els[1].text:match('(%a)(.*)')\n    if FORMAT == 'latex' then\n      els[1] = pandoc.RawInline('latex',\n                 '\\\\lettrine{' ..  first_letter ..\n                 '}{' .. rest .. '}')\n    elseif FORMAT:match('html') then\n      els[1] = pandoc.Span({\n                   pandoc.Span(pandoc.Str(first_letter),\n                    {class='dropcap-first'}),\n                   pandoc.Span(pandoc.Str(rest),\n                {class='dropcap-rest'})})\n    end\n    return els\n  end\nend\n```\n\n## Example: drop caps\n\n```\n% pandoc -L dropcap.lua -t latex -o dropcap.pdf\n% pandoc -L dropcap.lua -t html -s --css dropcap.css \\\n    dropcap.md -o dropcap.html\n```\n\n## Example: tikz diagrams\n\nTo get a tikz diagram, we could have a filter turn\nspecially marked code blocks into images.\n\nIn fact, there is already a very nice general\ndiagram filter at https://github.com/pandoc/lua-filters.\n\n```\n% cat diagram.md\n% pandoc diagram.md -L diagram-generator.lua -s \\\n  --extract-media=media -o diagram.html\n% pandoc diagram.md -L diagram-generator.lua \\\n  -o diagram.docx\n```\n\n## Example: theorems\n\nHow to reproduce LaTeX `theorem` environments?\n\nMarkdown version:\n```\n::: {.theorem #pythagoras}\n#### Pythagoras's Theorem\nIn a right triangle, the lengths of the two shorter sides\n$a$, $b$ and the longer side $c$ stand in the relation\n$$\na^2 + b^2 = c^2.\n$$\n:::\n```\n\n## Example: theorems\n\n```\n% cat theorem.lua\n% cat theorem.md\n% pandoc -L theorem.lua theorem.md -t latex\n% pandoc theorem.md -L theorem.lua -t plain\n% pandoc theorem.md -L theorem.lua -t rst\n% pandoc theorem.md -L theorem.lua -t html\n```\n\n## The end\n\n- For pandoc questions, come to pandoc-discuss on google groups:\n  <https://groups.google.com/g/pandoc-discuss>\n- For bug reports, the tracker at https://github.com/jgm/pandoc\n- If you'd like to improve pandoc's handling of LaTeX,\n  we can always use new contributors!\n\nQuestions?\n\n","to":"revealjs","from":"markdown","standalone":true,"citeproc":false,"html-math-method":"mathjax","highlight-style":"pygments","files":{},"template":null}
